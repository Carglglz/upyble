#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

import sys
import os
import argparse
import json
import upyble
import time
import signal
import shlex
import logging
import traceback
# from binascii import hexlify
import subprocess
import argcomplete
import textwrap
import struct
from argcomplete.completers import ChoicesCompleter
from upyble.upybledevice import (ble_scan, BASE_BLE_DEVICE, BLE_DEVICE,
                                 dfufy_file, DFU_BLE_CONTROLLER)
from upyble.chars import ble_char_dict, ble_char_dict_rev
from upyble.servs import ble_services_dict, ble_services_dict_rev
from upyble.appearances import ble_appearances_dict, ble_appearances_dict_rev
from upyble.manufacturer import ble_manufacturer_dict, ble_manufacturer_dict_rev
from upyble.chars import get_XML_CHAR, get_raw_XML_CHAR
from upyble.descriptors import get_XML_DESC, ble_descriptors_dict, ble_descriptors_dict_rev


def see_global_devs():
    try:
        with open('{}/UPYBLE_G.config'.format(upyble.__path__[0]), 'r', encoding='utf-8') as group:
            devices = json.loads(group.read())
            # print(devices)
        devs = list(devices.keys())
        return devs
    except Exception as e:
        return []


def see_groups():
    avoid_files = ['upyble_.config', 'help.config']
    local_cwd = [group_file.split('.')[0] for group_file in os.listdir(
    ) if '.config' in group_file and group_file not in 'upyble_.config']
    globl_wd = [group_file.split('.')[0] for group_file in os.listdir(
        upyble.__path__[0]) if '.config' in group_file and group_file not in avoid_files]
    return local_cwd + globl_wd


helparg = '''
- check:    to check local machine Bluetooth characterisctics
- scan:     to scan for BLE devices see -n for max number of scans
- tscan:    to scan for BLE devices, results with table format
- sconf:    to scan and configure a device that matches a name -d [NAME]
- config:   to configure a device use -t to indicate UUID of the device
- get_services: to get services of a device (see -r and -mdata)
- write: to write to a characteristic with write attribute (see -c)
- get_stag: to get service tag from a service code, use -scode to indicate the code
- get_scode: to get service code from a service tag, use -stag to indicate the tag
- get_ctag: to get characteristic tag from characteristic code, use -ccode to indicate the code
- get_ccode: to get characteristic code from a characteristic tag, use -ctag to indicate the tag
- get_aptag: to get appearance tag from an appearance code, use -apcode to indicate the code
- get_apcode: to get appearance code from an appearance tag, use -aptag to indicate the tag
- get_mtag: to get manufacturer tag from manufacturer code, use -mcode to indicate the code
- get_mcode: to get manufacturer code from a manufacturer tag, use -mtag to indicate the tag
- cmdata: to get characteristic metadata (name, type, uuid, unit, format, notes...), see -c and -xml
- cmdata_t: get_cmdata in table format.
- dmdata: to get descriptor metadata (Name, uuid, format) (see -desc option)
- dfu_freeze: "freeze" a script to be able to send it through BLE, ('myscript.py' --> 'myscript.bin') (see -f)
- dfu: to send a '.bin' script through BLE, (this needs 'dfu_targe.py' and its BLE_DFU_TARGET instance running)
- follow:   to read from a service (see -s, -c, -tm), autodetects format and unit from characteristic metadata
- rfollow: to read from a service (see -s, -c, -tm, -u, -fmt, -x)
- see: To get specific info about a devices group use -G option as "see -G [GROUP NAME]"
- brepl: to enter the BLE SHELL-REPL
- ble: to access brepl in a 'ssh' style command
      if a device is stored in a global group called "UPYBLE_G" (this
       needs to be created first doing e.g. "upyble make_group -g -f UPYBLE_G -devs foo_device UUID")
       The device can be accessed as "upyble ble@foo_device" or redirect any command as e.g.
       "upyble get_services -@foo_device".
- make_group: to make a group of boards to send commands to. Use -f for the name
              of the group and -devs option to indicate a name and uuid of each board.
              (To store the group settings globally use -g option)

- mg_group: to manage a group of boards to send commands to. Use -G for the name
              of the group and -add option to add devices (indicate a name and uuid
              of each board) or -rm to remove devices (indicated by name)
'''

usag = """%(prog)s [Mode] [options]

This means that if the first argument is not a Mode keyword or a
it assumes it is a 'raw' upy command to send to the upy device
"""
help_dv = "To point the command to a specific device saved in the global group"
# UPY MODE KEYWORDS AND COMMANDS
# TODO: WRITE TO CHARACTERISTIC
# TODO: SERVICE METADATA PARSING
# TODO: GATT PROFILES
keywords_mode = ['config', 'scan', 'tscan', 'sconf', 'get_services',
                 'brepl', 'ble', 'make_group', 'mg_group', 'see', 'check',
                 'follow', 'get_stag', 'get_scode', 'get_ctag',
                 'get_ccode', 'get_aptag', 'get_apcode', 'rfollow',
                 'get_mcode', 'get_mtag', 'cmdata', 'dmdata',
                 'write', 'dfu_freeze', 'dfu']

parser = argparse.ArgumentParser(prog='upyble',
                                 description='Command line tool for Bluetooth Low Energy MicroPython devices',
                                 formatter_class=argparse.RawTextHelpFormatter,
                                 usage=usag)
parser.version = '0.0.3'
parser.add_argument(
    "m", metavar='Mode', help=helparg).completer = ChoicesCompleter(keywords_mode)
parser.add_argument('-v', action='version')
parser.add_argument('-t', help='device target uuid')
parser.add_argument("-f", help='script or file name', required=False)
parser.add_argument("-@", help=help_dv, required=False).completer = ChoicesCompleter(see_global_devs())
parser.add_argument('-n', type=int, default=3, help='number of max scans to try')
parser.add_argument('-d', default='auto', help='device to config if available')
parser.add_argument('-desc', nargs='+', help='descriptor from which to get medata').completer = ChoicesCompleter(ble_descriptors_dict_rev.keys())
parser.add_argument('-s', help='service to write, read or receive notifications from').completer = ChoicesCompleter(ble_services_dict_rev.keys())
parser.add_argument('-c', nargs='+', help='characteristic to write, read or receive notifications from').completer = ChoicesCompleter(ble_char_dict_rev.keys())
parser.add_argument('-tm', type=int, default=5, help='read every "tm" seconds')
parser.add_argument('-u', default='AU', help='units to display')
parser.add_argument('-x',  default=1, type=int, help='scale down data by a factor [X]')
parser.add_argument('-fmt',  default='<h', help='binary data format to unpack')
parser.add_argument('-stag',  help='Service tag; e.g "Environmental Sensing"').completer = ChoicesCompleter(ble_services_dict_rev.keys())
parser.add_argument('-scode',  help='Service code; e.g "181A"').completer = ChoicesCompleter(ble_services_dict.keys())
parser.add_argument('-ctag',  help='Characteristic tag; e.g "Appearance"').completer = ChoicesCompleter(ble_char_dict_rev.keys())
parser.add_argument('-ccode',  help='Characteristic code; e.g "2A01"').completer = ChoicesCompleter(ble_char_dict.keys())
parser.add_argument('-aptag',  help='Appearance tag; e.g "GENERIC_THERMOMETER"').completer = ChoicesCompleter(ble_appearances_dict_rev.keys())
parser.add_argument('-apcode',  help='Appearance code; e.g "768"').completer = ChoicesCompleter(ble_appearances_dict.keys())
parser.add_argument('-mtag',  help='Manufacturer tag; e.g "Espressif"').completer = ChoicesCompleter(ble_manufacturer_dict_rev.keys())
parser.add_argument('-mcode',  help='Manufacturer code; e.g "741"').completer = ChoicesCompleter(ble_manufacturer_dict.keys())
parser.add_argument('-xml', help='To see metadata in original xml format', action='store_true')
parser.add_argument('-r', help='To read characteristics with get_service mode', action='store_true')
parser.add_argument('-mdata', help='To see characteristics metadata with get_service mode', action='store_true')
parser.add_argument('-ps', type=int, default=20,
                    help='packet size for dfu mode, default: 20 bytes')
parser.add_argument(
    "-st", help='shows target uuid if using config file', required=False, default=False, action='store_true')
parser.add_argument(
    "-g", help='to store/read the configuration file globally, if there is no config file in working directory, \n it uses the global file',
    required=False, default=False, action='store_true')
parser.add_argument('-devs', help='to indicate the devices that will be part of a group, use as -devs [DEV_1] [UUID_1] [DEV_2]...',
                    nargs='+')
parser.add_argument('-add', help='to indicate the devices that will be added to a group, use as -add [DEV_1] [UUID_1] [DEV_2]...',
                    nargs='+')
parser.add_argument('-rm', help='to indicate the devices that will be removed from a group, use as -rm [DEV_1] [DEV_2]...',
                    nargs='+')
parser.add_argument(
    '-G', help='to indicate the group of devices that the command is directed to').completer = ChoicesCompleter(see_groups())


argcomplete.autocomplete(parser)
args = parser.parse_args()


def address_entry_point(entry_point, group_file=''):
    if group_file == '':
        group_file = 'UPYBLE_G'
    # print(group_file)
    if '{}.config'.format(group_file) not in os.listdir() or args.g:
        group_file = '{}/{}'.format(upyble.__path__[0], group_file)
    with open('{}.config'.format(group_file), 'r', encoding='utf-8') as group:
        devices = json.loads(group.read())
        # print(devices)
    devs = devices.keys()
    # NAME ENTRY POINT
    if entry_point in devs:
        dev_uuid = devices[entry_point]
        # dev_pass = devices[entry_point][1]
        return (dev_uuid)
    else:
        print('Device not configured in global group: {}'.format(group_file))
        sys.exit()


def see():
    if args.G is None:
        pass
        # help_file = '{}/help.config'.format(upyble.__path__[0])
        # with open(help_file, 'r') as helpref:
        #     help_dict = json.loads(helpref.read())
        # columns, rows = os.get_terminal_size(0)
        # print('\n'.join(textwrap.wrap(help_dict[args.c], columns-3)))
    else:
        group_file = '{}.config'.format(args.G)
        if group_file not in os.listdir() or args.g:
            group_file = '{}/{}.config'.format(upyble.__path__[0], args.G)
        with open(group_file, 'r') as group:
            group_devs = (json.loads(group.read()))
        print('GROUP NAME: {}'.format(args.G))
        print('# DEVICES: {}'.format(len(group_devs.keys())))
        for key in group_devs.keys():
            dev_uuid = group_devs[key]
            print('DEVICE NAME: {}, UUID: {}'.format(key, dev_uuid))


wrapper = textwrap.TextWrapper(initial_indent=" "*4,)


def print_wrp(text, mg=3, f_indent=4, indent=0,
              wrapper=wrapper, f_indent_char='',
              r_indent_char=' ', s_indent=' '):
    columns, rows = os.get_terminal_size(0)
    if f_indent_char != '':
        f_indent += -1
    wrapper.initial_indent = f_indent_char + r_indent_char * f_indent
    wrapper.subsequent_indent = s_indent + ' ' * indent
    wrapper.width = columns-mg
    print('\n'.join(wrapper.wrap(text)))
#############################################


def ble_repl(uuid, usr=None):

    if usr is not None:

        blerepl_cmd_str = 'blerepl -t {} -dev {} -r'.format(uuid, usr)
    else:

        blerepl_cmd_str = 'blerepl -t {} -r'.format(uuid)
    blerepl_cmd = shlex.split(blerepl_cmd_str)

    old_action = signal.signal(signal.SIGINT, signal.SIG_IGN)

    def preexec_function(action=old_action):
        signal.signal(signal.SIGINT, action)

    try:
        blerepl = subprocess.call(blerepl_cmd, preexec_fn=preexec_function)
    except KeyboardInterrupt:
        pass

    sys.exit()
#############################################

# upyble MODES:

# @ ENTRY


if "@" in args.m:
    args.m, entry_point = args.m.split('@')

# CONFIG:
if args.m == 'config':
    if args.t is None:
        # if args.sec:
        #     print('Secure config mode:')
        #     args.t = input('IP of device: ')
        #     args.p = getpass.getpass(prompt='Password: ', stream=None)
        # else:
            print('Target uuid required, see -t')
            sys.exit()
    upyble_uuid = args.t
    upy_conf = {'uuid': upyble_uuid}
    file_conf = 'upyble_.config'
    if args.g:
        file_conf = '{}/upyble_.config'.format(upyble.__path__[0])
    with open(file_conf, 'w') as config_file:
        config_file.write(json.dumps(upy_conf))
    if args.g:
        print('upyble device settings saved globally!')
    else:
        print('upyble device settings saved in working directory!')
    sys.exit()


# CHECK

if args.m == 'check':
    if sys.platform == "darwin":
        subprocess.call(shlex.split('system_profiler SPBluetoothDataType'))
        sys.exit()
    elif sys.platform == 'linux':
        subprocess.call(shlex.split('hciconfig --all'))
        sys.exit()
# SCAN MODE
if args.m == 'scan':
    devs = []
    n = 0
    print('Scanning...')
    while n < args.n:
        try:
            devs = ble_scan()
            n += 1
            if len(devs) > 0:
                break
            else:
                print('Scanning...')
        except KeyboardInterrupt:
            sys.exit()
    if len(devs) == 0:
        print('No BLE device found')
    else:
        print('BLE device/s found: {}'.format(len(devs)))
        for dev in devs:
            services = ['']
            if hasattr(dev, 'metadata'):
                if isinstance(dev.metadata, dict):
                    if 'uuids' in dev.metadata.keys():
                        try:
                            services = [ble_services_dict[serv.upper()] for serv in dev.metadata['uuids']]
                        except Exception as e:
                            services = ['']

            print("NAME: {}, UUID: {}, RSSI: {} dBm, Services: {}".format(dev.name, dev.address,
                                                      dev.rssi, ','.join(services)))
    sys.exit()

# TSCAN
if args.m == 'tscan':
    devs = []
    n = 0
    print('Scanning...')
    while n < args.n:
        try:
            devs = ble_scan()
            n += 1
            if len(devs) > 0:
                break
            else:
                print('Scanning...')
        except KeyboardInterrupt:
            sys.exit()
    if len(devs) == 0:
        print('No BLE device found')
    else:
        print('BLE device/s found: {}'.format(len(devs)))
        print('┏{0}━┳━{1}━┳━{2}━┳━{3}━┓'.format(
            '━'*20, '━'*40, '━'*10, '━'*40))
        print('┃{0:^20} ┃ {1:^40} ┃ {2:^10} ┃ {3:^40} ┃'.format(
            'NAME', 'UUID', 'RSSI (dBm)', 'Services'))
        print('┣{0}━╋━{1}━╋━{2}━╋━{3}━┫'.format(
            '━'*20, '━'*40, '━'*10, '━'*40))
        for dev in devs:
            services = ['']
            if hasattr(dev, 'metadata'):
                if isinstance(dev.metadata, dict):
                    if 'uuids' in dev.metadata.keys():
                        try:
                            services = [ble_services_dict[serv.upper()] for serv in dev.metadata['uuids']]
                        except Exception as e:
                            services = ['']

            print('┃{0:^20} ┃ {1:^40} ┃ {2:^10} ┃ {3:^40} ┃'.format(dev.name, dev.address,
                                                         int(dev.rssi), ','.join(services)))
        print('┗{0}━┻━{1}━┻━{2}━┻━{3}━┛'.format(
            '━'*20, '━'*40, '━'*10, '━'*40))
    sys.exit()
# SCAN CONFIG
if args.m == 'sconf':
    bdev = None
    if args.d == "auto":
        devs = []
        n = 0
        print('Scanning...')
        while n < args.n:
            try:
                devs = ble_scan()
                n += 1
                if len(devs) > 0:
                    break
                else:
                    print('Scanning...')
            except KeyboardInterrupt:
                sys.exit()
        bdev = devs[0]
    else:
        devs = []
        n = 0
        print('Scanning...')
        while n < args.n:
            try:
                devs = ble_scan()
                n += 1
                if len(devs) > 0:
                    break
                else:
                    print('Scanning...')
            except KeyboardInterrupt:
                sys.exit()
        for dev in devs:
            if args.d in dev.name:
                bdev = dev
                break

    if len(devs) == 0:
        print('No BLE device found')
    else:
        print('BLE device/s found: {}'.format(len(devs)))
        for dev in devs:
            print("NAME: {}, UUID: {}, RSSI: {} dBm".format(dev.name, dev.address,
                                                      dev.rssi))
        if bdev:
            print('Saving {} configuration...'.format(bdev.name))
            upyble_uuid = bdev.address
            upy_conf = {'uuid': upyble_uuid}
            file_conf = 'upyble_.config'
            if args.g:
                file_conf = '{}/upyble_.config'.format(upyble.__path__[0])
            with open(file_conf, 'w') as config_file:
                config_file.write(json.dumps(upy_conf))
            if args.g:
                print('upyble device settings saved globally!')
            else:
                print('upyble device settings saved in working directory!')
        else:
            print('No BLE device found that matchs name "{}"'.format(args.d))
    sys.exit()

# MAKE GROUP
if args.m == 'make_group':
    group_file = '{}.config'.format(args.f)
    group_dict = dict(zip(args.devs[::2], args.devs[1::2]))
    if args.g:
        group_file = '{}/{}.config'.format(upyble.__path__[0], args.f)
    with open(group_file, 'w') as group:
        group.write(json.dumps(group_dict))

    if args.g:
        print('Group settings saved globally!')
    else:
        print('Group settings saved in working directory!')
    print('Upy BLE devices group created!')
    print('GROUP NAME: {}'.format(args.f))
    print('# DEVICES: {}'.format(len(group_dict.keys())))
    for key in group_dict.keys():
        print('DEVICE NAME: {}, UUID: {}'.format(key, group_dict[key]))
    sys.exit()


# UPYDEV GROUP COMMAND
if args.G is not None:
    try:
        group_file = args.G
        # print(group_file)
        if '{}.config'.format(group_file) not in os.listdir() or args.g:
            group_file = '{}/{}'.format(upyble.__path__[0], args.G)
        if args.m == 'see':
            see()
            sys.exit()
        if args.m == 'mg_group':
            if args.add is not None:
                group_dict = dict(zip(args.add[::2], args.add[1::2]))
                with open('{}.config'.format(group_file), 'r', encoding='utf-8') as group:
                    devices = json.loads(group.read())
                    devices.update(group_dict)
                with open('{}.config'.format(group_file), 'w', encoding='utf-8') as group:
                    group.write(json.dumps(devices))
                print('Upy devices group updated!')
                print('GROUP NAME: {}'.format(group_file.split('/')[-1]))
                print('# DEVICES ADDED: {}'.format(len(group_dict.keys())))
                for key in group_dict.keys():
                    print('DEVICE NAME: {}, UUID: {}'.format(
                        key, group_dict[key]))
            elif args.rm is not None:
                group_dict_rm = args.rm
                removed_devs = {}
                with open('{}.config'.format(group_file), 'r', encoding='utf-8') as group:
                    devices = json.loads(group.read())
                    for dev in group_dict_rm:
                        # del devices[dev]
                        if dev not in list(devices.keys()):
                            pass
                        else:
                            removed_devs.update({dev: devices.pop(dev)})

                with open('{}.config'.format(group_file), 'w', encoding='utf-8') as group:
                    group.write(json.dumps(devices))
                print('Upy devices group updated!')
                print('GROUP NAME: {}'.format(group_file.split('/')[-1]))
                print('# DEVICES REMOVED: {}'.format(len(removed_devs.keys())))
                for key in removed_devs.keys():
                    print('DEVICE NAME: {}, UUID: {}'.format(
                        key, removed_devs[key]))

            sys.exit()
        sys.exit()
    except Exception as e:
        print(e)
        print('file not found, please create a group first')
        sys.exit()


# DFU_FREEZE
if args.m == 'dfu_freeze':
    if args.f:
        dfufy_file(args.f)
    sys.exit()
# GET_SERV_TAG
if args.m == 'get_stag':
    if args.scode is not None:
        print('{} : {}'.format(args.scode, ble_services_dict[args.scode]))

    sys.exit()

# GET_SERV_CODE
if args.m == 'get_scode':
    if args.stag is not None:
        print('{} : {}'.format(args.stag, ble_services_dict_rev[args.stag]))

    sys.exit()


# GET_CHAR_TAG
if args.m == 'get_ctag':
    if args.ccode is not None:
        print('{} : {}'.format(args.ccode, ble_char_dict[args.ccode]))

    sys.exit()

# GET_CHAR_CODE
if args.m == 'get_ccode':
    if args.ctag is not None:
        print('{} : {}'.format(args.ctag, ble_char_dict_rev[args.ctag]))

    sys.exit()

# GET_APPEAR_TAG
if args.m == 'get_aptag':
    if args.apcode is not None:
        print('{} : {}'.format(args.apcode, ble_appearances_dict[int(args.apcode)]))

    sys.exit()

# GET_APPEAR_CODE
if args.m == 'get_apcode':
    if args.aptag is not None:
        print('{} : {}'.format(args.aptag, ble_appearances_dict_rev[args.aptag]))

    sys.exit()

# GET_MANUFACTURER_TAG
if args.m == 'get_mtag':
    if args.mcode is not None:
        print('{} : {}'.format(args.mcode, ble_manufacturer_dict[int(args.mcode)]))

    sys.exit()

# GET_MANUFACTURER_CODE
if args.m == 'get_mcode':
    if args.mtag is not None:
        print('{} : {}'.format(args.mtag, ble_manufacturer_dict_rev[args.mtag]))

    sys.exit()

# GET CHAR METADATA
if args.m == 'cmdata':
    try:
        if not args.xml:
            print('Characteristic Metadata:')
            if 'all' in args.c:
                failed_chars = []
                for char in ble_char_dict_rev.keys():
                    try:
                        print('\u001b[44;1mCharacteristic:\u001b[0m {}'.format(char))
                        print('')
                        char_xml = get_XML_CHAR(char)
                        print_wrp('- NAME: {}'.format(char_xml.name))
                        print_wrp('- ABSTRACT: {}'.format(char_xml.abstract),
                                  indent=4 + len('- ABSTRACT: '))
                        print_wrp('- SUMMARY: {}'.format(char_xml.summary),
                                  indent=4 + len('- SUMMARY: '))
                        # print_wrp('- UUID: {}'.format(char_xml.uuid))
                        # print_wrp('- QUANTITY: {}'.format(char_xml.quantity))
                        # print_wrp('- UNIT_ID: {}'.format(char_xml.unit_stringcode))
                        # print_wrp('- UNIT: {}'.format(char_xml.unit))
                        # print_wrp('- SYMBOL: {}'.format(char_xml.unit_symbol))
                        # print_wrp('- FORMAT: {}'.format(char_xml.data_format))
                        # print_wrp('- CTYPE: {}'.format(char_xml.fmt))
                        print_wrp('- FIELDS:')
                        for field in char_xml.fields:
                            print_wrp('- {}: '.format(field), f_indent=8)
                            for key in char_xml.fields[field]:
                                if key == 'BitField':
                                    print_wrp('- {}:'.format(key), f_indent=12)
                                    for bit in char_xml.fields[field][key]:
                                        print_wrp('- {}: '.format(bit), f_indent=16)
                                        for keybit in char_xml.fields[field][key][bit].keys():
                                            if keybit == 'Enumerations':
                                                print_wrp('- {}:'.format(keybit), f_indent=20)
                                                for k, v in char_xml.fields[field][key][bit][keybit].items():

                                                    print_wrp('- {}: {}'.format(k, v), f_indent=24)
                                            else:
                                                print_wrp('- {}: {}'.format(keybit, char_xml.fields[field][key][bit][keybit]), f_indent=20)
                                else:
                                    if key == 'Enumerations':
                                        if 'BitField' not in char_xml.fields[field].keys():
                                            print_wrp('- {}:'.format(key), f_indent=12)
                                            for k, v in char_xml.fields[field][key].items():

                                                print_wrp('- {}: {}'.format(k, v), f_indent=16)
                                    else:
                                        print_wrp('- {}: {}'.format(key, char_xml.fields[field][key]), f_indent=12, indent=12)




                        # if char_xml.bitfields.keys():
                        #     for field in char_xml.bitfields:
                        #         print_wrp('- {}: '.format(field))
                        #         for bit in char_xml.bitfields[field]:
                        #             print_wrp('- {}: '.format(bit), f_indent=8)
                        #             for key in char_xml.bitfields[field][bit].keys():
                        #                 if key == 'Enumerations':
                        #                     print_wrp('- {}:'.format(key), f_indent=12)
                        #                     for k, v in char_xml.bitfields[field][bit][key].items():
                        #
                        #                         print_wrp('- {}: {}'.format(k, v), f_indent=16)
                        #                 else:
                        #                     print_wrp('- {}: {}'.format(key, char_xml.bitfields[field][bit][key]), f_indent=12)
                        print_wrp('- TYPE: {}'.format(char_xml.char_type))
                        print_wrp('- INFO TEXT: {}'.format(char_xml.info_text),
                                  indent=4 + len('- INFO TEXT: '))
                        print_wrp('- DESCRIPTION: {}'.format(char_xml.description),
                                  indent=4 + len('- DESCRIPTION: '))
                        # print_wrp('- MAXIMUM: {}'.format(char_xml.maximum))
                        # print_wrp('- MINIMUM: {}'.format(char_xml.minimum))
                        # print_wrp('- DECIMAL EXPONENT: {}'.format(char_xml.dec_exp))
                        print_wrp('- NOTE: {}'.format(char_xml.note),
                                  indent=4 + len('- NOTE: '))
                        print('')
                        print('━'*50)
                        print('')
                        # print('\u001b[44;1mCharacteristic:\u001b[0m {}'.format(char))
                        # print('')
                        # char_xml = get_XML_CHAR(char)
                        # print_wrp('- NAME: {}'.format(char_xml.name))
                        # print_wrp('- ABSTRACT: {}'.format(char_xml.abstract),
                        #           indent=4 + len('- ABSTRACT: '))
                        # print_wrp('- SUMMARY: {}'.format(char_xml.summary),
                        #           indent=4 + len('- SUMMARY: '))
                        # print_wrp('- UUID: {}'.format(char_xml.uuid))
                        # print_wrp('- QUANTITY: {}'.format(char_xml.quantity))
                        # print_wrp('- UNIT_ID: {}'.format(char_xml.unit_stringcode))
                        # print_wrp('- UNIT: {}'.format(char_xml.unit))
                        # print_wrp('- SYMBOL: {}'.format(char_xml.unit_symbol))
                        # print_wrp('- FORMAT: {}'.format(char_xml.data_format))
                        # print_wrp('- CTYPE: {}'.format(char_xml.fmt))
                        # print_wrp('- FIELDS:')
                        # for field in char_xml.fields:
                        #     print_wrp('- {}: '.format(field), f_indent=8)
                        #     for key in char_xml.fields[field]:
                        #         if key == 'Enumerations':
                        #             print_wrp('- {}:'.format(key), f_indent=12)
                        #             for k, v in char_xml.fields[field][key].items():
                        #
                        #                 print_wrp('- {}: {}'.format(k, v), f_indent=16)
                        #         else:
                        #             print_wrp('- {}: {}'.format(key, char_xml.fields[field][key]), f_indent=12, indent=12)
                        # if char_xml.bitfields.keys():
                        #     for field in char_xml.bitfields:
                        #         print_wrp('- {}: '.format(field))
                        #         for bit in char_xml.bitfields[field]:
                        #             print_wrp('- {}: '.format(bit), f_indent=8)
                        #             for key in char_xml.bitfields[field][bit].keys():
                        #                 if key == 'Enumerations':
                        #                     print_wrp('- {}:'.format(key), f_indent=12)
                        #                     for k, v in char_xml.bitfields[field][bit][key].items():
                        #
                        #                         print_wrp('- {}: {}'.format(k, v), f_indent=16)
                        #                 else:
                        #                     print_wrp('- {}: {}'.format(key, char_xml.bitfields[field][bit][key]), f_indent=12)
                        # print_wrp('- TYPE: {}'.format(char_xml.char_type))
                        # print_wrp('- INFO TEXT: {}'.format(char_xml.info_text),
                        #           indent=4 + len('- INFO TEXT: '))
                        # print_wrp('- DESCRIPTION: {}'.format(char_xml.description),
                        #           indent=4 + len('- DESCRIPTION: '))
                        # print_wrp('- MAXIMUM: {}'.format(char_xml.maximum))
                        # print_wrp('- MINIMUM: {}'.format(char_xml.minimum))
                        # print_wrp('- DECIMAL EXPONENT: {}'.format(char_xml.dec_exp))
                        # print_wrp('- NOTE: {}'.format(char_xml.note),
                        #           indent=4 + len('- NOTE: '))
                        # print('')
                        # print('━'*50)
                        # print('')
                    except Exception as e:
                        print(traceback.format_exc())
                        print('Characteristic: {} XML not available or malformed'.format(char))
                        print('')
                        print('━'*50)
                        print('')
                        failed_chars.append(char)
                if failed_chars:
                    print_wrp('\u001b[41;1mFailed\u001b[0m parsing characteristics metadata or not available: {}'.format(', '.join(failed_chars)),
                              indent=4)
            else:

                for char in args.c:
                    print('\u001b[44;1mCharacteristic:\u001b[0m {}'.format(char))
                    print('')
                    char_xml = get_XML_CHAR(char)
                    print_wrp('- NAME: {}'.format(char_xml.name))
                    print_wrp('- ABSTRACT: {}'.format(char_xml.abstract),
                              indent=4 + len('- ABSTRACT: '))
                    print_wrp('- SUMMARY: {}'.format(char_xml.summary),
                              indent=4 + len('- SUMMARY: '))
                    # print_wrp('- UUID: {}'.format(char_xml.uuid))
                    # print_wrp('- QUANTITY: {}'.format(char_xml.quantity))
                    # print_wrp('- UNIT_ID: {}'.format(char_xml.unit_stringcode))
                    # print_wrp('- UNIT: {}'.format(char_xml.unit))
                    # print_wrp('- SYMBOL: {}'.format(char_xml.unit_symbol))
                    # print_wrp('- FORMAT: {}'.format(char_xml.data_format))
                    # print_wrp('- CTYPE: {}'.format(char_xml.fmt))
                    print_wrp('- FIELDS:')
                    for field in char_xml.fields:
                        print_wrp('- {}: '.format(field), f_indent=8)
                        for key in char_xml.fields[field]:
                            if key == 'BitField':
                                print_wrp('- {}:'.format(key), f_indent=12)
                                for bit in char_xml.fields[field][key]:
                                    print_wrp('- {}: '.format(bit), f_indent=16)
                                    for keybit in char_xml.fields[field][key][bit].keys():
                                        if keybit == 'Enumerations':
                                            print_wrp('- {}:'.format(keybit), f_indent=20)
                                            for k, v in char_xml.fields[field][key][bit][keybit].items():

                                                print_wrp('- {}: {}'.format(k, v), f_indent=24)
                                        else:
                                            print_wrp('- {}: {}'.format(keybit, char_xml.fields[field][key][bit][keybit]), f_indent=20)
                            else:
                                if key == 'Enumerations':
                                    if 'BitField' not in char_xml.fields[field].keys():
                                        print_wrp('- {}:'.format(key), f_indent=12)
                                        for k, v in char_xml.fields[field][key].items():

                                            print_wrp('- {}: {}'.format(k, v), f_indent=16)
                                else:
                                    print_wrp('- {}: {}'.format(key, char_xml.fields[field][key]), f_indent=12, indent=12)




                    # if char_xml.bitfields.keys():
                    #     for field in char_xml.bitfields:
                    #         print_wrp('- {}: '.format(field))
                    #         for bit in char_xml.bitfields[field]:
                    #             print_wrp('- {}: '.format(bit), f_indent=8)
                    #             for key in char_xml.bitfields[field][bit].keys():
                    #                 if key == 'Enumerations':
                    #                     print_wrp('- {}:'.format(key), f_indent=12)
                    #                     for k, v in char_xml.bitfields[field][bit][key].items():
                    #
                    #                         print_wrp('- {}: {}'.format(k, v), f_indent=16)
                    #                 else:
                    #                     print_wrp('- {}: {}'.format(key, char_xml.bitfields[field][bit][key]), f_indent=12)
                    print_wrp('- TYPE: {}'.format(char_xml.char_type))
                    print_wrp('- INFO TEXT: {}'.format(char_xml.info_text),
                              indent=4 + len('- INFO TEXT: '))
                    print_wrp('- DESCRIPTION: {}'.format(char_xml.description),
                              indent=4 + len('- DESCRIPTION: '))
                    # print_wrp('- MAXIMUM: {}'.format(char_xml.maximum))
                    # print_wrp('- MINIMUM: {}'.format(char_xml.minimum))
                    # print_wrp('- DECIMAL EXPONENT: {}'.format(char_xml.dec_exp))
                    print_wrp('- NOTE: {}'.format(char_xml.note),
                              indent=4 + len('- NOTE: '))
                    print('')
                    print('━'*50)
                    print('')

        else:
            for char in args.c:
                print('Characteristic: {}'.format(char))
                print('<-----Characteristic Metadata XML---->')
                char_xml = get_XML_CHAR(char)
                print(char_xml._raw)
        sys.exit()
    except Exception as e:
        try:
            if args.xml:
                for char in args.c:
                    # print('Characteristic: {}'.format(char))
                    # print('<-----Characteristic Metadata XML---->')
                    print(get_raw_XML_CHAR(char))
            else:
                print(e)
                print('XML not available or malformed')
        except Exception as e:
            print(e)
            print('XML not available or malformed')
        sys.exit()

if args.m == 'cmdata_t':
    try:
        print('Characteristic Metadata')
        print('┏{0}━┳━{1}━┳━{2}━┳━{3}━┳━{4}━┳━{5}━┓'.format(
            '━'*40, '━'*5, '━'*20, '━'*10, '━'*10, '━'*10))
        print('┃{0:^40} ┃ {1:^5} ┃ {2:^20} ┃ {3:^10} ┃ {4:^10} ┃ {5:^10} ┃'.format(
            'NAME', 'UUID', 'UNIT', 'SYMBOL', 'FORMAT', 'CTYPE'))
        print('┣{0}━╋━{1}━╋━{2}━╋━{3}━╋━{4}━╋━{5}━┫'.format(
            '━'*40, '━'*5, '━'*20, '━'*10, '━'*10, '━'*10))
        for char in args.c:
            char_xml = get_XML_CHAR(char)
            print('┃{0:^40} ┃ {1:^5} ┃ {2:^20} ┃ {3:^10} ┃ {4:^10} ┃ {5:^10} ┃'.format(char_xml.name,
                                                                   char_xml.uuid,
                                                                   char_xml.unit,
                                                                   char_xml.unit_symbol,
                                                                   char_xml.data_format,
                                                                   char_xml.fmt))
        print('┗{0}━┻━{1}━┻━{2}━┻━{3}━┻━{4}━┻━{5}━┛'.format(
            '━'*40, '━'*5, '━'*20, '━'*10, '━'*10, '━'*10))
        sys.exit()
    except Exception as e:
        print('XML not available or malformed')
        sys.exit()


# GET DESC METADATA
if args.m == 'dmdata':
    try:
        if not args.xml:
            print('Descriptor Metadata:')
            if 'all' in args.desc:
                for desc in ble_descriptors_dict_rev.keys():
                    try:
                        print('\u001b[45;1mDescriptor:\u001b[0m {}'.format(desc))
                        print('')
                        desc_xml = get_XML_DESC(desc)
                        print_wrp('- NAME: {}'.format(desc_xml.name))
                        print_wrp('- ABSTRACT: {}'.format(desc_xml.abstract), indent=4+len('- ABSTRACT:'))
                        if desc_xml.summary is not None:
                            print_wrp('- SUMMARY: {}'.format('.\n'.join([line.strip() for line in desc_xml.summary.split('.')])), indent=4+len('- SUMMARY:'))
                        print_wrp('- UUID: {}'.format(desc_xml.uuid))
                        print_wrp('- INFO TEXT: {}'.format(desc_xml.info_text))
                        for field in desc_xml.fields:
                            print_wrp('- {}: '.format(field))
                            for key in desc_xml.fields[field]:
                                if key == 'Enumerations':
                                    print_wrp('- {}:'.format(key), f_indent=8)
                                    for k, v in desc_xml.fields[field][key].items():

                                        print_wrp('- {}: {}'.format(k, v), f_indent=12)
                                else:
                                    print_wrp('- {}: {}'.format(key, desc_xml.fields[field][key]), f_indent=8, indent=8)

                        print('')
                        print('━'*50)
                        print('')
                    except Exception as e:
                        print(traceback.format_exc())
                        print('Descriptor: {} XML not available or malformed'.format(desc))
                        print('')
                        print('━'*50)
                        print('')

            else:

                for desc in args.desc:
                    print('\u001b[45;1mDescriptor:\u001b[0m {}'.format(desc))
                    print('')
                    desc_xml = get_XML_DESC(desc)
                    print_wrp('- NAME: {}'.format(desc_xml.name))
                    print_wrp('- ABSTRACT: {}'.format(desc_xml.abstract),
                              indent=4+len('- ABSTRACT:'))
                    if desc_xml.summary is not None:
                        print_wrp('- SUMMARY: {}'.format('.\n'.join([line.strip() for line in desc_xml.summary.split('.')])),
                                  indent=4+len('    - SUMMARY:'))
                    print_wrp('- UUID: {}'.format(desc_xml.uuid))
                    print_wrp('- INFO TEXT: {}'.format(desc_xml.info_text))
                    for field in desc_xml.fields:
                        print_wrp('- {}: '.format(field))
                        for key in desc_xml.fields[field]:
                            if key == 'Enumerations':
                                print_wrp('- {}:'.format(key), f_indent=8)
                                for k, v in desc_xml.fields[field][key].items():

                                    print_wrp('- {}: {}'.format(k, v), f_indent=12)
                            else:
                                print_wrp('- {}: {}'.format(key, desc_xml.fields[field][key]), f_indent=8, indent=8)


        else:
            for desc in args.desc:
                print('Descriptor: {}'.format(desc))
                print('<-----Descriptor Metadata XML---->')
                desc_xml = get_XML_DESC(desc)
                print(desc_xml._raw)
        sys.exit()
    except Exception as e:
        print(e)
        sys.exit()

# upyble LOOKS FOR upyble_.CONFIG FILE
if args.t is None:
    try:
        file_conf = 'upyble_.config'
        if file_conf not in os.listdir() or args.g:
            file_conf = '{}/upyble_.config'.format(upyble.__path__[0])

        with open(file_conf, 'r') as config_file:
            upy_conf = json.loads(config_file.read())
        args.t = upy_conf['uuid']

        # @ ENTRY POINT
        # if args.b is not None:
        #     if "@" in args.b:
        #         gf, entryp = args.b.split('@')
        #         args.t, args.p = address_entry_point(entryp, gf)
        if vars(args)['@'] is not None:
                entryp = vars(args)['@']
                args.t = address_entry_point(entryp)
        # if args.apmd:
        #     args.t = '192.168.4.1'
        if args.st:
            print('Target UUID: {}'.format(args.t))
    except Exception as e:
        print('upyble_.config file not found, please provide target and\n\
        \rpassword or create config file with command "config" (see help)')
        sys.exit()

# GET SERVICES

if args.m == 'get_services':
    print('Getting services...')
    bdev = BLE_DEVICE(args.t)
    bdev.connect(n_tries=args.n, show_servs=True, log=False)
    bdev.read_char_metadata()
    if not bdev.connected:
        print('Device not reachable try again.')
        pass
    else:
        if args.r:
            print('Reading services...')
            is_last_serv = False
            is_last_char = False
            for service in bdev.services_rsum:
                if service == list(bdev.services_rsum.keys())[-1]:
                    is_last_serv = True
                print_wrp('┃', f_indent=0)
                if is_last_serv:
                    print_wrp("\u001b[42;1m{}\u001b[0m".format(service),
                              f_indent_char='┗', r_indent_char='━')
                else:
                    print_wrp("\u001b[42;1m{}\u001b[0m".format(service),
                              f_indent_char='┣', r_indent_char='━')
                for char in bdev.services_rsum[service]:
                    if char in bdev.readables:
                        if char == bdev.services_rsum[service][-1]:
                            is_last_char = True
                        else:
                            is_last_char = False
                        if not is_last_serv:
                            print_wrp('┃', f_indent_char='┃')
                        else:
                            print_wrp('┃', f_indent_char='')
                        char_xml = get_XML_CHAR(char)
                        try:
                            char_value = bdev.get_char_value(char)
                        except Exception as e:
                            char_value = {char: {'Value': ''}}
                        try:
                            string_data = bdev.pformat_char_value(char_value,
                                                                  rtn=True,
                                                                  prnt=False,
                                                                  one_line=True,
                                                                  only_val=True)
                        except Exception as e:
                            string_data = bdev.pformat_char_flags(char_value, sep='\n - ')

                        if not is_last_serv:
                            if is_last_char:
                                print_wrp("┗━━━\u001b[44;1m{:^30}\u001b[0m {} ".format(char, string_data),
                                          f_indent=4, f_indent_char='┃',
                                          indent=40, s_indent='┃')
                            else:
                                print_wrp("┣━━━\u001b[44;1m{:^30}\u001b[0m {} ".format(char, string_data),
                                          f_indent=4, f_indent_char='┃', indent=40,
                                          s_indent='┃   ┃')
                        else:
                            if is_last_char:
                                print_wrp("┗━━━\u001b[44;1m{:^30}\u001b[0m {} ".format(char, string_data),
                                          f_indent=4, f_indent_char='', indent=40)
                            else:
                                print_wrp("┣━━━\u001b[44;1m{:^30}\u001b[0m {} ".format(char, string_data),
                                          f_indent=4, f_indent_char='', indent=40,
                                          s_indent='     ┃')
                        for desc in bdev.chars_desc_rsum[char]:
                            if desc == 'Characteristic User Description':
                                if not is_last_serv:
                                    print_wrp('┃', f_indent_char='┃', f_indent=8)
                                else:
                                    print_wrp('┃', f_indent_char='', f_indent=8)
                                desc_value = bdev.read_descriptor(key=desc, char=char)
                                if not is_last_serv:
                                    # if is_last_char:
                                    print_wrp("┗━━━\u001b[45;1m{:^30}\u001b[0m {}".format(desc, desc_value),
                                              f_indent=8, f_indent_char='┃')
                                #     else:
                                #         print_wrp("┣━━━\u001b[45;1m{:^30}\u001b[0m {} ".format(char, desc_value),
                                #                   f_indent=8, f_indent_char='┃')
                                else:
                                    # if is_last_char:
                                    print_wrp("┗━━━\u001b[45;1m{:^30}\u001b[0m {} ".format(desc, desc_value),
                                              f_indent=8, f_indent_char='')
                                    # else:
                                    #     print_wrp("┣━━━\u001b[45;1m{:^30}\u001b[0m {} ".format(char, desc_value),
                                    #               f_indent=8, f_indent_char='')

        if args.mdata:
            print('')
            print('Characteristics metadata:')
            print('')
            for service in bdev.services_rsum:
                for char in bdev.services_rsum[service]:
                    print('\u001b[44;1mCharacteristic:\u001b[0m {}'.format(char))
                    print('')
                    char_xml = get_XML_CHAR(char)
                    print_wrp('- NAME: {}'.format(char_xml.name))
                    print_wrp('- ABSTRACT: {}'.format(char_xml.abstract),
                              indent=4 + len('- ABSTRACT: '))
                    print_wrp('- SUMMARY: {}'.format(char_xml.summary),
                              indent=4 + len('- SUMMARY: '))
                    # print_wrp('- UUID: {}'.format(char_xml.uuid))
                    # print_wrp('- QUANTITY: {}'.format(char_xml.quantity))
                    # print_wrp('- UNIT_ID: {}'.format(char_xml.unit_stringcode))
                    # print_wrp('- UNIT: {}'.format(char_xml.unit))
                    # print_wrp('- SYMBOL: {}'.format(char_xml.unit_symbol))
                    # print_wrp('- FORMAT: {}'.format(char_xml.data_format))
                    # print_wrp('- CTYPE: {}'.format(char_xml.fmt))
                    print_wrp('- FIELDS:')
                    for field in char_xml.fields:
                        print_wrp('- {}: '.format(field), f_indent=8)
                        for key in char_xml.fields[field]:
                            if key == 'BitField':
                                print_wrp('- {}:'.format(key), f_indent=12)
                                for bit in char_xml.fields[field][key]:
                                    print_wrp('- {}: '.format(bit), f_indent=16)
                                    for keybit in char_xml.fields[field][key][bit].keys():
                                        if keybit == 'Enumerations':
                                            print_wrp('- {}:'.format(keybit), f_indent=20)
                                            for k, v in char_xml.fields[field][key][bit][keybit].items():

                                                print_wrp('- {}: {}'.format(k, v), f_indent=24)
                                        else:
                                            print_wrp('- {}: {}'.format(keybit, char_xml.fields[field][key][bit][keybit]), f_indent=20)
                            else:
                                if key == 'Enumerations':
                                    if 'BitField' not in char_xml.fields[field].keys():
                                        print_wrp('- {}:'.format(key), f_indent=12)
                                        for k, v in char_xml.fields[field][key].items():

                                            print_wrp('- {}: {}'.format(k, v), f_indent=16)
                                else:
                                    print_wrp('- {}: {}'.format(key, char_xml.fields[field][key]), f_indent=12, indent=12)




                    # if char_xml.bitfields.keys():
                    #     for field in char_xml.bitfields:
                    #         print_wrp('- {}: '.format(field))
                    #         for bit in char_xml.bitfields[field]:
                    #             print_wrp('- {}: '.format(bit), f_indent=8)
                    #             for key in char_xml.bitfields[field][bit].keys():
                    #                 if key == 'Enumerations':
                    #                     print_wrp('- {}:'.format(key), f_indent=12)
                    #                     for k, v in char_xml.bitfields[field][bit][key].items():
                    #
                    #                         print_wrp('- {}: {}'.format(k, v), f_indent=16)
                    #                 else:
                    #                     print_wrp('- {}: {}'.format(key, char_xml.bitfields[field][bit][key]), f_indent=12)
                    print_wrp('- TYPE: {}'.format(char_xml.char_type))
                    print_wrp('- INFO TEXT: {}'.format(char_xml.info_text),
                              indent=4 + len('- INFO TEXT: '))
                    print_wrp('- DESCRIPTION: {}'.format(char_xml.description),
                              indent=4 + len('- DESCRIPTION: '))
                    # print_wrp('- MAXIMUM: {}'.format(char_xml.maximum))
                    # print_wrp('- MINIMUM: {}'.format(char_xml.minimum))
                    # print_wrp('- DECIMAL EXPONENT: {}'.format(char_xml.dec_exp))
                    print_wrp('- NOTE: {}'.format(char_xml.note),
                              indent=4 + len('- NOTE: '))
                    print('')
                    print('━'*50)
                    print('')


        bdev.disconnect(log=False)
    sys.exit()
# RAW COMMANDS
# UPYDEV RAW COMMAND MODE: (WHEN ARGUMENT Mode is not in keyword list)

if args.m not in keywords_mode:
    cmd = args.m
    bdev = BASE_BLE_DEVICE(args.t)
    bdev.connect(log=False)
    if not bdev.connected:
        print('Device not reachable, try again.')
    else:
        bdev.wr_cmd(cmd=cmd, follow=True)
        bdev.disconnect(log=False)
    sys.exit()

# BLE_SHELL-REPL
elif args.m == 'brepl':
    if vars(args)['@'] is not None:
        entryp = vars(args)['@']
        ble_repl(args.t, usr=entryp)
    else:
        ble_repl(args.t)

elif args.m == 'ble':
    group_file = 'UPYBLE_G'
    # print(group_file)
    if '{}.config'.format(group_file) not in os.listdir() or args.g:
        group_file = '{}/{}'.format(upyble.__path__[0], group_file)
    with open('{}.config'.format(group_file), 'r', encoding='utf-8') as group:
        devices = json.loads(group.read())
        # print(devices)
    devs = devices.keys()
    # NAME ENTRY POINT
    if entry_point in devs:
        dev_uuid = devices[entry_point]
        try:
            ble_repl(dev_uuid, usr=entry_point)
        except Exception as e:
            print('UUID INVALID or DEVICE NOT REACHABLE')

# READ/FOLLOW SERVICE
elif args.m == 'follow':
    print('Following service: {}'.format(args.s))
    bdev = BLE_DEVICE(args.t, init=True)
    if not bdev.connected:
        print('Device not reachable try again.')
        sys.exit()
    else:
        bdev.get_services()
        handler = logging.StreamHandler(sys.stdout)
        handler.setLevel(logging.INFO)
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(name)s] %(message)s",
            handlers=[handler])
        if bdev.name is not None:
            log = logging.getLogger('upyble@{}'.format(bdev.name))
        else:
            log = logging.getLogger('upyble')

        # SERVICES AND CHARACTERISTICS Availability
        servs_keys = list(bdev.services_rsum.keys())
        servs_values = list(bdev.readables.values())
        if args.c != [] and args.c is not None:
            chars_to_read = [ch for ch in args.c if ch in bdev.services_rsum[args.s]]
            for ch in args.c:
                if ch not in bdev.services_rsum[args.s]:
                    log.warning("Characterisctic {} not available".format(ch))
                else:
                    if ch not in list(bdev.readables.keys()):
                        log.warning("Characterisctic {} not readable".format(ch))
        else:
            if args.s != 'all':
                chars_to_read = bdev.services_rsum[args.s]
        if args.s in servs_keys and chars_to_read != []:
            # GET CHARS INFO
            CHARS_XML_AUTO = {char: get_XML_CHAR(char) for char in chars_to_read}
            while True:
                try:
                    for char in chars_to_read:
                        if char in list(bdev.readables.keys()):
                            # scale = args.x
                            # if CHARS_XML_AUTO[char].dec_exp is not None:
                            #     scale = 1/(10**CHARS_XML_AUTO[char].dec_exp)
                            # # data = bdev.read_char(key=char, data_fmt=CHARS_XML_AUTO[char].fmt)
                            data = bdev.get_char_value(char)

                            if char == 'Battery Power State':
                                bdev.get_batt_power_state()
                                log.info("{} [{}] : {}".format(args.s, char,
                                                                  ','.join(bdev.batt_power_state.values())))
                            else:
                                try:
                                    string_data = bdev.pformat_char_value(data,
                                                                          rtn=True,
                                                                          prnt=False,
                                                                          one_line=True,
                                                                          only_val=True)
                                    log.info("{} [{}] : {} ".format(args.s, char,
                                                                    string_data))
                                except Exception as e:
                                    try:
                                        string_data = bdev.pformat_char_flags(data)
                                        log.info("{} [{}] : {} ".format(args.s, char,
                                                                        string_data))
                                    except Exception as e:
                                        log.info("{} [{}] : {} ".format(args.s,
                                                                        char,
                                                                        data))

                        else:
                            log.warning("Characterisctic {} not readable".format(char))
                    time.sleep(args.tm)
                except Exception as e:
                    print(e)
                except KeyboardInterrupt:
                    break
        else:
            if args.s == 'all':
                chars_to_read = bdev.readables.keys()
                CHARS_XML_AUTO = {}
                for char in chars_to_read:
                    try:
                        CHARS_XML_AUTO[char] = get_XML_CHAR(char)
                    except Exception as e:
                        log.debug('Char {} xml malformed'.format(char))
                while True:
                    try:
                        for serv in bdev.services_rsum.keys():
                            for char in bdev.services_rsum[serv]:
                                scale = args.x
                                if char in list(CHARS_XML_AUTO.keys()):
                                    # if CHARS_XML_AUTO[char].dec_exp is not None:
                                    #     scale = 1/(10**CHARS_XML_AUTO[char].dec_exp)
                                    # log.info('Reading : {}'.format(char))
                                    # data = bdev.read_char(key=char, data_fmt=CHARS_XML_AUTO[char].fmt)
                                    data = bdev.get_char_value(char)
                                    # if isinstance(data, str):
                                    #     log.info("{} [{}] : {} {}".format(serv, char,
                                    #                                       data, CHARS_XML_AUTO[char].unit_symbol))
                                    # else:
                                    if char == 'Battery Power State':
                                        bdev.get_batt_power_state()
                                        log.info("{} [{}] : {}".format(serv, char,
                                                                          ','.join(bdev.batt_power_state.values())))

                                    # elif isinstance(data, dict):
                                    #     log.info("{} [{}] : {}".format(serv, char, data))

                                    else:
                                        try:
                                            string_data = bdev.pformat_char_value(data,
                                                                                  rtn=True,
                                                                                  prnt=False,
                                                                                  one_line=True,
                                                                                  only_val=True)
                                            log.info("{} [{}] : {} ".format(serv, char, string_data))
                                        except Exception as e:
                                            try:
                                                string_data = bdev.pformat_char_flags(data)
                                                log.info("{} [{}] : {} ".format(serv, char, string_data))
                                            except Exception as e:
                                                log.info("{} [{}] : {} ".format(serv, char, data))

                                # elif args.s in servs_values:
                                #     data = bdev.read_char(uuid=args.s, data_fmt=args.fmt)[0]
                                #     log.info("{} [{}] : {:.2f} {}".format(servs_keys[servs_values.index(args.s)],
                                #                                  ble_char_dict[args.s],
                                #                                  data/args.x, args.u))
                                else:
                                    log.debug("Characterisctic {} not readable".format(char))
                        time.sleep(args.tm)
                    except Exception as e:
                        print(e)
                        time.sleep(args.tm)
                    except KeyboardInterrupt:
                        break
        bdev.disconnect()
        sys.exit()

# RAW
elif args.m == 'rfollow':
    print('Following service: {}'.format(args.s))
    bdev = BASE_BLE_DEVICE(args.t)
    bdev.connect(n_tries=args.n, show_servs=True, log=False)
    if not bdev.connected:
        print('Device not reachable try again.')
        sys.exit()
    else:
        handler = logging.StreamHandler(sys.stdout)
        handler.setLevel(logging.INFO)
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(name)s] %(message)s",
            handlers=[handler])
        if bdev.name is not None:
            log = logging.getLogger('upyble@{}'.format(bdev.name))
        else:
            log = logging.getLogger('upyble')

        # SERVICES AND CHARACTERISTICS Availability
        servs_keys = list(bdev.services_rsum.keys())
        servs_values = list(bdev.readables.values())
        if args.c != [] and args.c is not None:
            chars_to_read = [ch for ch in args.c if ch in bdev.services_rsum[args.s]]
            for ch in args.c:
                if ch not in bdev.services_rsum[args.s]:
                    log.warning("Characterisctic {} not available".format(ch))
                else:
                    if ch not in list(bdev.readables.keys()):
                        log.warning("Characterisctic {} not readable".format(ch))
        else:
            chars_to_read = bdev.services_rsum[args.s]
        if args.s in servs_keys and chars_to_read != []:
            while True:
                try:
                    for char in chars_to_read:
                        if char in list(bdev.readables.keys()):
                            data = bdev.read_char(key=char, data_fmt=args.fmt)
                            log.info("{} [{}] : {} {}".format(args.s, char,
                                                              data/args.x, args.u))

                        elif args.s in servs_values:
                            data = bdev.read_char(uuid=args.s, data_fmt=args.fmt)
                            log.info("{} [{}] : {} {}".format(servs_keys[servs_values.index(args.s)],
                                                         ble_char_dict[args.s],
                                                         data/args.x, args.u))
                        else:
                            log.warning("Characterisctic {} not readable".format(char))
                    time.sleep(args.tm)
                except Exception as e:
                    print(e)
                except KeyboardInterrupt:
                    break
        bdev.disconnect()
        sys.exit()

# WRITE TO CHARACTERISTIC
elif args.m == 'write':
    print('Writing to characteristic: {}'.format(args.c[0]))
    n = 0
    while n < args.n:
        bdev = BLE_DEVICE(args.t, init=True)
        if bdev.connected:
            break
        else:
            n += 1
    if not bdev.connected:
        print('Device not reachable try again.')
        sys.exit()
    else:
        bdev.get_services()
        handler = logging.StreamHandler(sys.stdout)
        handler.setLevel(logging.INFO)
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s [%(name)s] %(message)s",
            handlers=[handler])
        if bdev.name is not None:
            log = logging.getLogger('upyble@{}'.format(bdev.name))
        else:
            log = logging.getLogger('upyble')

        # SERVICES AND CHARACTERISTICS Availability
        servs_keys = list(bdev.services_rsum.keys())
        writeables = list(bdev.writeables.keys())
        if args.c[0] not in writeables:
            print('Characteristic not available in {}'.format(bdev.name))
        else:
            char = get_XML_CHAR(writeables[0])
            if 'Enumerations' in char.fields[char.name].keys():
                print('{} options:'.format(char.name))
                for k, v in char.fields[char.name]['Enumerations'].items():
                    print(f'\t - {v}: {k}')
                val = int(input('{}: '.format(char.name)))
                format = char.fields[char.name]['Ctype']
                packed_val = struct.pack(format, val)
                bdev.write_char(char.name, data=packed_val)
                time.sleep(2)
                bdev.disconnect()
                sys.exit()
            else:
                pass

elif args.m == 'dfu':
    if args.t:
        devdfu = DFU_BLE_CONTROLLER(args.t, init=True, packet_size=args.ps)
        if devdfu.connected:
            # ASSERT DFU MODE
            assert 'Device Firmware Update Service' in devdfu.services_rsum, 'DFU Mode not available'
            assert 'DFU Control Point' in devdfu.services_rsum['Device Firmware Update Service'], 'Missing DFU Control Point'
            assert 'DFU Packet' in devdfu.services_rsum['Device Firmware Update Service'], 'Missing DFU Packet'
            if args.f:
                assert args.f.endswith('.bin'), 'Incorrect file format, use dfu_freeze to create the proper file'
                devdfu.do_dfu(args.f)
